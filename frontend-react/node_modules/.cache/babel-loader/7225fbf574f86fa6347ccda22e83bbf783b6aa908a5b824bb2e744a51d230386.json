{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documentos\\\\OneDrive\\\\Documentos\\\\SPD_2023\\\\WepAppProject\\\\frontend-react\\\\src\\\\Paginas\\\\Content.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogContent from '@mui/material/DialogContent';\r\n\r\nfunction Content() {\r\n  const [rawData, setRawData] = useState('');\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedImageUrl, setSelectedImageUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const dataParam = params.get('data');\r\n\r\n    if (dataParam) {\r\n      setRawData(dataParam);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const data = JSON.parse(rawData);\r\n      if (Array.isArray(data)) {\r\n        setImageUrls(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al analizar datos en bruto:', error);\r\n    }\r\n  }, [rawData]);\r\n\r\n  const handleImageClick = (url) => {\r\n    setSelectedImageUrl(url);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {imageUrls.length > 0 ? (\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            {imageUrls.map((url, index) => (\r\n              <Grid item xs={12} sm={6} md={4} key={index}>\r\n                <Card\r\n                  sx={{\r\n                    height: '100%',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                  }}\r\n                >\r\n                  <CardMedia\r\n                    component=\"div\"\r\n                    sx={{\r\n                      pt: '75%',\r\n                      backgroundColor: 'blue', \r\n                      cursor: 'pointer', \r\n                    }}\r\n                    image={url}\r\n                    onClick={() => handleImageClick(url)}\r\n                  />\r\n                 \r\n                  <CardActions sx={{ backgroundColor: '#eaeff1' }}>\r\n                    <Button size=\"small\">Edit</Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n\r\n          {}\r\n         <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n            <DialogContent>\r\n              <img src={selectedImageUrl} alt=\"FullScreen\" style={{ width: '100%', height: 'auto' }} />\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n      ) : (\r\n        <p>No hay imágenes para mostrar.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardMedia from '@mui/material/CardMedia';\nimport CardActions from '@mui/material/CardActions';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport Navigator from './Navigator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Content() {\n  _s();\n  /*nuevo\r\n  useEffect(() => {\r\n    // Solo hacer la petición si showTrash es true\r\n    if (showTrash) {\r\n      // Hacer la petición a la base de datos para obtener imágenes borradas\r\n      // Utiliza fetch, axios, u otra librería para manejar peticiones HTTP.\r\n      // Aquí estoy utilizando un ejemplo ficticio.\r\n      fetch('/api/media/trash')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          // Actualiza el estado de mediaItems con las imágenes borradas\r\n          setMediaItems(data);\r\n        })\r\n        .catch(error => console.error('Error al obtener imágenes borradas:', error));\r\n    }\r\n  }, [showTrash]);\r\n    */\n  const [rawData, setRawData] = useState('');\n  const [mediaItems, setMediaItems] = useState([]);\n  const [selectedMedia, setSelectedMedia] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const dataParam = params.get('data');\n    if (dataParam) {\n      setRawData(dataParam);\n    }\n  }, []);\n  useEffect(() => {\n    try {\n      const data = JSON.parse(rawData);\n      if (Array.isArray(data)) {\n        setMediaItems(data);\n        console.log('Mis datos', data);\n      }\n    } catch (error) {\n      console.error('Error al analizar datos en bruto:', error);\n    }\n  }, [rawData]);\n  const handleMediaClick = media => {\n    setSelectedMedia(media);\n    setOpenDialog(true);\n  };\n  const handleClick = () => {\n    console.log('Click recibido desde Content');\n    // Llama a la función onTrashClick pasada como prop\n    onTrashClick();\n    // Agrega la lógica adicional si es necesario\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n  const openVideoInNewTab = videoUrl => {\n    window.open(videoUrl, '_blank');\n  };\n  console.log('Contenido de mediaItems:', mediaItems);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleClick,\n    children: [mediaItems.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: mediaItems.map((media, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n              component: \"div\",\n              sx: {\n                pt: '75%',\n                backgroundColor: 'blue',\n                cursor: 'pointer'\n              },\n              image: media.baseUrl,\n              onClick: () => {\n                if (media.mimeType && media.mimeType.startsWith('image')) {\n                  handleMediaClick(media);\n                } else if (media.mimeType && media.mimeType.startsWith('video')) {\n                  openVideoInNewTab(media.productUrl);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              sx: {\n                backgroundColor: '#eaeff1'\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: openDialog,\n        onClose: handleCloseDialog,\n        children: /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: selectedMedia && selectedMedia.mimeType && selectedMedia.mimeType.startsWith('image') ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedMedia.baseUrl,\n            alt: \"FullScreen\",\n            style: {\n              width: '100%',\n              height: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 17\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay medios para mostrar.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Navigator, {\n      data: mediaItems,\n      onTrashClick: onTrashClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(Content, \"QgdnKTeJPFcaHbWP6oYDF3a7w4E=\");\n_c = Content;\nexport default Content;\nvar _c;\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"names":["React","useEffect","useState","Card","CardMedia","CardActions","Button","Grid","Dialog","DialogContent","Navigator","jsxDEV","_jsxDEV","Content","_s","rawData","setRawData","mediaItems","setMediaItems","selectedMedia","setSelectedMedia","openDialog","setOpenDialog","params","URLSearchParams","window","location","search","dataParam","get","data","JSON","parse","Array","isArray","console","log","error","handleMediaClick","media","handleClick","onTrashClick","handleCloseDialog","openVideoInNewTab","videoUrl","open","onClick","children","length","container","spacing","map","index","item","xs","sm","md","sx","height","display","flexDirection","component","pt","backgroundColor","cursor","image","baseUrl","mimeType","startsWith","productUrl","fileName","_jsxFileName","lineNumber","columnNumber","size","onClose","src","alt","style","width","_c","$RefreshReg$"],"sources":["D:/Documentos/OneDrive/Documentos/SPD_2023/WepAppProject/frontend-react/src/Paginas/Content.js"],"sourcesContent":["/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogContent from '@mui/material/DialogContent';\r\n\r\nfunction Content() {\r\n  const [rawData, setRawData] = useState('');\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedImageUrl, setSelectedImageUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const dataParam = params.get('data');\r\n\r\n    if (dataParam) {\r\n      setRawData(dataParam);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const data = JSON.parse(rawData);\r\n      if (Array.isArray(data)) {\r\n        setImageUrls(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al analizar datos en bruto:', error);\r\n    }\r\n  }, [rawData]);\r\n\r\n  const handleImageClick = (url) => {\r\n    setSelectedImageUrl(url);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {imageUrls.length > 0 ? (\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            {imageUrls.map((url, index) => (\r\n              <Grid item xs={12} sm={6} md={4} key={index}>\r\n                <Card\r\n                  sx={{\r\n                    height: '100%',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                  }}\r\n                >\r\n                  <CardMedia\r\n                    component=\"div\"\r\n                    sx={{\r\n                      pt: '75%',\r\n                      backgroundColor: 'blue', \r\n                      cursor: 'pointer', \r\n                    }}\r\n                    image={url}\r\n                    onClick={() => handleImageClick(url)}\r\n                  />\r\n                 \r\n                  <CardActions sx={{ backgroundColor: '#eaeff1' }}>\r\n                    <Button size=\"small\">Edit</Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n\r\n          {}\r\n         <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n            <DialogContent>\r\n              <img src={selectedImageUrl} alt=\"FullScreen\" style={{ width: '100%', height: 'auto' }} />\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n      ) : (\r\n        <p>No hay imágenes para mostrar.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n*/\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogContent from '@mui/material/DialogContent';\r\n\r\nimport Navigator from './Navigator';\r\n\r\nfunction Content() {\r\n\r\n  /*nuevo\r\n  useEffect(() => {\r\n    // Solo hacer la petición si showTrash es true\r\n    if (showTrash) {\r\n      // Hacer la petición a la base de datos para obtener imágenes borradas\r\n      // Utiliza fetch, axios, u otra librería para manejar peticiones HTTP.\r\n      // Aquí estoy utilizando un ejemplo ficticio.\r\n      fetch('/api/media/trash')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          // Actualiza el estado de mediaItems con las imágenes borradas\r\n          setMediaItems(data);\r\n        })\r\n        .catch(error => console.error('Error al obtener imágenes borradas:', error));\r\n    }\r\n  }, [showTrash]);\r\n\r\n  */\r\n  const [rawData, setRawData] = useState('');\r\n  const [mediaItems, setMediaItems] = useState([]);\r\n  const [selectedMedia, setSelectedMedia] = useState(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const dataParam = params.get('data');\r\n\r\n    if (dataParam) {\r\n      setRawData(dataParam);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const data = JSON.parse(rawData);\r\n\r\n      if (Array.isArray(data)) {\r\n        setMediaItems(data);\r\n        console.log('Mis datos',data);\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error('Error al analizar datos en bruto:', error);\r\n    }\r\n  }, [rawData]);\r\n\r\n  const handleMediaClick = (media) => {\r\n    setSelectedMedia(media);\r\n    setOpenDialog(true);\r\n  };\r\n  const handleClick = () => {\r\n    console.log('Click recibido desde Content');\r\n    // Llama a la función onTrashClick pasada como prop\r\n    onTrashClick();\r\n    // Agrega la lógica adicional si es necesario\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const openVideoInNewTab = (videoUrl) => {\r\n    window.open(videoUrl, '_blank');\r\n  };\r\n  \r\n  console.log('Contenido de mediaItems:', mediaItems);\r\n  return (\r\n    <div onClick={handleClick}>\r\n      {mediaItems.length > 0 ? (\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            {mediaItems.map((media, index) => (\r\n              <Grid item xs={12} sm={6} md={4} key={index}>\r\n                <Card\r\n                  sx={{\r\n                    height: '100%',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                  }}\r\n                >\r\n                  <CardMedia\r\n                    component=\"div\"\r\n                    sx={{\r\n                      pt: '75%',\r\n                      backgroundColor: 'blue',\r\n                      cursor: 'pointer',\r\n                    }}\r\n                    image={media.baseUrl}\r\n                    onClick={() => {\r\n                      if (media.mimeType && media.mimeType.startsWith('image')) {\r\n                        handleMediaClick(media);\r\n                      } else if (media.mimeType && media.mimeType.startsWith('video')) {\r\n                        openVideoInNewTab(media.productUrl);\r\n                      }\r\n                    }}\r\n                  />\r\n\r\n                  <CardActions sx={{ backgroundColor: '#eaeff1' }}>\r\n                    <Button size=\"small\">Edit</Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n\r\n          <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n            <DialogContent>\r\n              {selectedMedia && selectedMedia.mimeType && selectedMedia.mimeType.startsWith('image') ? (\r\n                <img src={selectedMedia.baseUrl} alt=\"FullScreen\" style={{ width: '100%', height: 'auto' }} />\r\n              ) : null}\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n      ) : (\r\n        <p>No hay medios para mostrar.</p>\r\n      )}\r\n      <Navigator data={mediaItems} onTrashClick={onTrashClick} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,aAAa,MAAM,6BAA6B;AAEvD,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMsB,M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"},"metadata":{},"sourceType":"module","externalDependencies":[]}